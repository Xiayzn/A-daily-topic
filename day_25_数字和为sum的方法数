/*
[编程|20分] 数字和为sum的方法数
时间限制：C/C++ 1秒，其他语言 2秒
空间限制：C/C++ 32768K，其他语言 65536K
64bit IO Format: %lld

本题可使用本地IDE编码，不做跳出限制，编码后请点击“保存并调试”按钮进行代码提交。

题目描述
给定一个有n个正整数的数组A和一个整数sum,求选择数组A中部分数字和为sum的方案数。
当两种选取方案有一个数字的下标不一样,我们就认为是不同的组成方案。

输入描述:
输入为两行:
 第一行为两个正整数n(1 ≤ n ≤ 1000)，sum(1 ≤ sum ≤ 1000)
 第二行为n个正整数A[i](32位整数)，以空格隔开。
 
输出描述:
输出所求的方案数

示例1
输入
5 15 5 5 10 2 3

输出
4
*/

#include<iostream>
#include<vector>
#include<algorithm>
#include<stdio.h>
#include<memory.h>
using namespace std;
#define MAX 1005

int main()
{
    int n,m;
    int arr[MAX];
    cin>>n>>m;
    for(int i = 1; i <= n; i++) cin>>arr[i];
    long long dp[MAX][MAX];
    memset(dp,0,sizeof(dp));

    dp[0][0] = 1;
    for(int i = 1; i <= n; i++)
    {
        dp[i][0] = 1;
        for(int j = 0; j <= m; j++)
        {
            if(j < arr[i])
            {
                dp[i][j] = dp[i-1][j];
            }
            else
            {
                dp[i][j] = dp[i-1][j] + dp[i-1][j-arr[i]];
            }
        }
    }
    cout<<dp[n][m]<<endl;

    return 0;
}

//优化方案
#include<iostream>
#include<vector>
#include<algorithm>
#include<stdio.h>
#include<memory.h>
using namespace std;
#define MAX 1005

int main()
{
    int n,m;
    int arr[MAX];
    cin>>n>>m;
    for(int i = 1; i <= n; i++) cin>>arr[i];
    long long dp[MAX];
    memset(dp,0,sizeof(dp));

    dp[0] = 1;
    for(int i = 1; i <= n; i++)
    {
        for(int j = m; j >=  arr[i]; j--)
        {
           dp[j] = dp[j] + dp[j-arr[i]];
        }
    }

    cout<<dp[m]<<endl;

    return 0;
}
