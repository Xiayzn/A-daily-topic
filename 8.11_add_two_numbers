/*
思考：
其实不用考虑别的，就是两个数字相加，和传统加法唯一的不同就是此题中的加法是从左往右算的，进位也是从左往右进。
例子里给的就是
        2  4  3
＋    5  6  4
——————
        7  0  8
正常加法应该先算3+4， 接着4+6，进一位，最后2+5，加之前的进位1，得到8；
在本题就应该先算 2+5， 接着4+6，进一位到3+4中，3+4+1=8，最后得到708。
对于两个list不等长的情况，比如1->8 + 0，就把短的list的末尾用0补齐就行了。
*/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *addTwoNumbers(ListNode *l1, ListNode *l2) {
        int bit=0;
        ListNode res(0);
        ListNode *left=&res;
        while(l1 && l2){
            ListNode *right=new ListNode((l1->val+l2->val+bit)%10);
            bit=(l1->val+l2->val+bit)/10;
            left->next=right;
            left=right;
            l1=l1->next;
            l2=l2->next;
        }
        while(l1==NULL && l2){
            ListNode *right=new ListNode((l2->val+bit)%10);
            bit=(l2->val+bit)/10;
            left->next=right;
            left=right;
            l2=l2->next;
        }
        while(l2==NULL && l1){
            ListNode *right=new ListNode((l1->val+bit)%10);
            bit=(l1->val+bit)/10;
            left->next=right;
            left=right;
            l1=l1->next;
        }
        if(bit!=0){
            ListNode *right=new ListNode(1);
            left->next=right;
        }
        return res.next;

    }
};
